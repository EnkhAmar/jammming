{"version":3,"sources":["Components/util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","id","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccesToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackURIs","length","userID","method","body","JSON","stringify","playlistID","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fb16687.chunk.js","sourcesContent":["const clienID = 'fa579d3d7fa342239bef2494b71929b7'\r\nconst redirectURI = 'http://localhost:3000/'\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccesToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            // This clears the parameters, allowing us to grab new access token new when it expires.\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessURL = `https://accounts.spotify.com/authorize?client_id=${clienID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\r\n            window.location = accessURL;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccesToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`\r\n                }\r\n            }).then(response => {\r\n                return response.json();\r\n            }).then(jsonResponse => {\r\n                if (!jsonResponse.tracks) {\r\n                    return [];\r\n                }\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }))\r\n            })\r\n    },\r\n\r\n    savePlayList(name, trackURIs) {\r\n        if (!name || !trackURIs.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccesToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userID;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userID = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            })\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            const playlistID = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ uris: trackURIs })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react'\r\nimport './SearchBar.css'\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        };\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\"\r\n                        onChange={this.handleTermChange}\r\n                        />\r\n                <button id=\"search-button\" className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React from 'react'\r\nimport './Track.css'\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react'\r\nimport './TrackList.css'\r\n\r\nimport Track from '../Track/Track'\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track}\r\n                            key={track.id}\r\n                            onAdd={this.props.onAdd}\r\n                            onRemove={this.props.onRemove}\r\n                            isRemoval={this.props.isRemoval}\r\n                            />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList","import React from 'react'\r\nimport './SearchResults.css'\r\n\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults}\r\n                    onAdd={this.props.onAdd}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react'\r\nimport './Playlist.css'\r\n\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks}\r\n                    onRemove={this.props.onRemove}\r\n                    isRemoval={true}\r\n                />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport Playlist from '../Playlist/Playlist'\n\nimport Spotify from '../util/Spotify'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    })\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: [] \n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}\n\n          />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}